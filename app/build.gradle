plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

ext.readProperty = { paramName -> readPropertyWithDefault(paramName, null) }
ext.readPropertyWithDefault = { paramName, defaultValue ->
    if (project.hasProperty(paramName)) {
        return project.getProperties().get(paramName)
    } else {
        Properties properties = new Properties()
        if (project.rootProject.file('local.properties').exists()) {
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
        }
        if (properties.getProperty(paramName) != null) {
            return properties.getProperty(paramName)
        } else {
            return defaultValue
        }
    }
}

// Try reading secrets from file
def secretsPropertiesFile = rootProject.file("secrets.properties")
def secretProperties = new Properties()

if (secretsPropertiesFile.exists()) {
    secretProperties.load(new FileInputStream(secretsPropertiesFile))
}
// Otherwise read from environment variables, this happens in CI
else {
    secretProperties.setProperty("signing_keystore_password", "${System.getenv('signing_keystore_password')}")
    secretProperties.setProperty("signing_key_password", "${System.getenv('signing_key_password')}")
    secretProperties.setProperty("signing_key_alias", "${System.getenv('signing_key_alias')}")
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        applicationId "net.schueller.peertube"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode Integer.valueOf(System.getenv("VERSION_CODE") ?: 1)
        versionName System.getenv("VERSION_NAME") + "-" + System.getenv("VERSION_SHA")
        buildConfigField "long", "BUILD_TIME", readPropertyWithDefault('buildTimestamp', System.currentTimeMillis()) + 'L'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }
    }

    signingConfigs {
        release {
            // You need to specify either an absolute path or include the
            // keystore file in the same directory as the build.gradle file.
            storeFile file("../android-signing-keystore.jks")
            storePassword "${secretProperties['signing_keystore_password']}"
            keyAlias "${secretProperties['signing_key_alias']}"
            keyPassword "${secretProperties['signing_key_password']}"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.resValue "string", "versionName", variant.versionName
    }
}

dependencies {

    // Use kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'

    // Layouts and design
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'de.hdodenhof:circleimageview:3.0.0'

    implementation 'androidx.preference:preference-ktx:1.1.1'

    // font awesome
    implementation 'com.mikepenz:iconics-core:3.1.0'
    implementation 'com.mikepenz:fontawesome-typeface:5.3.1.1@aar'

    // http client / REST
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // database lib
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // image downloading and caching library
    implementation('com.squareup.picasso:picasso') { version { strictly '2.8' } }

    // Torrents and WebRTC
    implementation 'com.github.TorrentStream:TorrentStream-Android:2.6.1'
//            implementation "com.github.TorrentStream:TorrentStreamServer-Android:1.0.1"
//            implementation 'org.webrtc:google-webrtc:1.0.+'

    // video player  repo:jcenter()
    implementation "com.google.android.exoplayer:exoplayer-core:$libVersions.exoplayer"
    implementation "com.google.android.exoplayer:exoplayer-dash:$libVersions.exoplayer"
    implementation "com.google.android.exoplayer:exoplayer-ui:$libVersions.exoplayer"
    implementation "com.google.android.exoplayer:exoplayer-hls:$libVersions.exoplayer"
    implementation "com.google.android.exoplayer:exoplayer-smoothstreaming:$libVersions.exoplayer"
    implementation "com.google.android.exoplayer:extension-mediasession:$libVersions.exoplayer"
    implementation "com.google.android.exoplayer:extension-okhttp:$libVersions.exoplayer"

    // date formatter
    implementation 'org.ocpsoft.prettytime:prettytime:4.0.4.Final'

    // Version comparison
    implementation 'org.apache.maven:maven-artifact:3.5.0'
}
